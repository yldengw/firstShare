{
    "angular":{
        "id":1,
        "author":"大漠穷秋",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"如果你是新手，请务必先看完本项目的视频教程",
        "text":""
    },
    "HTML5":{
        "id":2,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"HTML5",
        "text":"<p>HTML5 中的一些有趣的新特性</p><p>用于绘画的 canvas 元素</p><p>用于媒介回放的 video 和 audio 元素</p><p>对本地离线存储的更好的支持</p><p>新的特殊内容元素，比如 article、footer、header、nav、section</p><p>新的表单控件，比如 calendar、date、time、email、url、search</p>"
    },
    "CSS3":{
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"CSS3、SCSS、SASS、LESS",
        "text":"<p>最重要的 CSS3 模块包括</p><p>选择器</p><p>框模型</p><p>背景和边框</p><p>文本效果</p><p>2D/3D 转换</p><p>动画</p><p>多列布局</p><p>用户界面</p>"
    },
    "Javascript":{
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"Javascript",
        "text":"<p></p>"
    },
    "SSM":{
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"SSM",
        "text":"<p></p>"
    },
    "strappingTool" : {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"strappingTool",
        "text":"<p></p>"
    },
    "浏览器兼容性问题" : {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"strappingTool",
        "text":"<p></p>"
    },
    "AgileManagement": {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"AgileManagement",
        "text":"<p></p>"
    },
    "abstract": {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"AgileManagement",
        "text":"<p></p>"
    },
    "designPattern": {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"designPattern",
        "text":"<p></p>"
    },
    "shiro": {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"shiro",
        "text":"<p></p>"
    },
    "git": {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"git",
        "text":"<p></p>"
    },
    "WebUI": {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"WebUI",
        "text":"<p></p>"
    },
    "jquery": {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"jquery",
        "text":"<p></p>"
    },
    "es6": {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"es6",
        "text":"<p></p>"
    },
    "UnitTest": {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"UnitTest",
        "text":"web控制器层的代码往往由前端浏览器调用，所以很难做单元测试，但是根据质量要求，单元测试需要覆盖率，我们也可以对web控制器层做单元测试，这就需要引入spring的：org.springframework.test.web.servlet.MockMvc。<p>首先，为了简单起见，我们先将Service层用mockito来mock掉：</p><p>UserService userService = mock(UserService.class);</p><p>// ... mock代码<p>然后，new一个控制器出来，并注入mock后的Service：<p>UserCtrl userCtrl = new UserCtrl ();</p><p>userCtrl.setUserService(userService);</p><p>最后，得到一个mock后的控制器：</p><p>MockMvc mockMvc = standaloneSetup(userCtrl).build();</p><p>这样，这个mockMvc 就可以用于测试了。</p><p>例如测试一个post请求：</p><p>// 首先创建一个表单对象：<p><p>UserForm form = new UserForm();</p><p> form.setUsername('foo');</p><p>form.setPassword('123456Abcabc');</p><p>// 序列化为json字符串</p><p>String json = gson.toJson(form);</p><p> // 关键点，在执行时，可以在UserCtrl中添加断点，查看debug的走势</p><p> mockMvc.perform(post('/user')</p><p> .characterEncoding('UTF-8')</p><p>.contentType(MediaType.APPLICATION_JSON)</p><p>.content(json.getBytes()))</p><p>.andExpect(status().isOk());</p><p>// 测试校验不通过的情况</p><p>form.setUsername(null);</p><p>json = gson.toJson(form);</p><p> mockMvc.perform(post('/user')</p><p> .characterEncoding('UTF-8')</p><p> .contentType(MediaType.APPLICATION_JSON)</p> <p>.content(json.getBytes()))</p><p> .andExpect(status().is(HttpStatus.BAD_REQUEST.value()));</p>"
    },
    "database": {
        "id":3,
        "author":"学习学习",
        "postTime":"2016-12-12 12:12:12",
        "readTimes":999999,
        "commentTimes":99999,
        "title":"database",
        "text":""
    }
   
}